[{"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/index.js":"1","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/App.js":"2","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/accessToken.js":"3","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/index.js":"4","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/ScrollToView.js":"5","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/BecomePartner.js":"6","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/muiTheme.js":"7","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/store.js":"8","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/index.js":"9","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/index.js":"10","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/Create.js":"11","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/PageFour.js":"12","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/reducers/index.js":"13","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/PageTwo.js":"14","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/Loader.js":"15","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/Card.js":"16","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/Button.js":"17","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/FormInput.js":"18","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/CheckBox.js":"19","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/FormSelect.js":"20","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/CustomButton.js":"21","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/PreviousButton.js":"22","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/Form.js":"23","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/Time.js":"24","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/graphQL/Mutation.js":"25","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/FormikControl.js":"26","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/DateTimePicker.js":"27","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/Textarea.js":"28","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/Select.js":"29","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/Date.js":"30","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/Input.js":"31","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/File.js":"32","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/TextError.js":"33","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/reducers/authReducer.js":"34","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/reducers/tablesReducer.js":"35","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/action-types/index.js":"36","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/PageOne.js":"37","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/LoginInput.js":"38","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/SearchInput.js":"39","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/graphQL/UseQuery.js":"40"},{"size":1122,"mtime":1645605844499,"results":"41","hashOfConfig":"42"},{"size":1479,"mtime":1646121593411,"results":"43","hashOfConfig":"42"},{"size":156,"mtime":1645605844471,"results":"44","hashOfConfig":"42"},{"size":37,"mtime":1645605844499,"results":"45","hashOfConfig":"42"},{"size":392,"mtime":1646139923271,"results":"46","hashOfConfig":"42"},{"size":1042,"mtime":1648109189124,"results":"47","hashOfConfig":"42"},{"size":3527,"mtime":1647245219629,"results":"48","hashOfConfig":"42"},{"size":290,"mtime":1645605844499,"results":"49","hashOfConfig":"42"},{"size":294,"mtime":1646139923271,"results":"50","hashOfConfig":"42"},{"size":417,"mtime":1646243544271,"results":"51","hashOfConfig":"42"},{"size":1318,"mtime":1646139923271,"results":"52","hashOfConfig":"42"},{"size":3310,"mtime":1646287293276,"results":"53","hashOfConfig":"42"},{"size":265,"mtime":1645605844499,"results":"54","hashOfConfig":"42"},{"size":11709,"mtime":1646288744319,"results":"55","hashOfConfig":"42"},{"size":457,"mtime":1645605844495,"results":"56","hashOfConfig":"42"},{"size":1161,"mtime":1645605844495,"results":"57","hashOfConfig":"42"},{"size":1261,"mtime":1646243544271,"results":"58","hashOfConfig":"42"},{"size":961,"mtime":1647245219629,"results":"59","hashOfConfig":"42"},{"size":1955,"mtime":1645605844495,"results":"60","hashOfConfig":"42"},{"size":1214,"mtime":1645605844495,"results":"61","hashOfConfig":"42"},{"size":2323,"mtime":1645618919370,"results":"62","hashOfConfig":"42"},{"size":1295,"mtime":1647245219629,"results":"63","hashOfConfig":"42"},{"size":31219,"mtime":1647125988062,"results":"64","hashOfConfig":"42"},{"size":1925,"mtime":1645605844495,"results":"65","hashOfConfig":"42"},{"size":2884,"mtime":1645605844495,"results":"66","hashOfConfig":"42"},{"size":817,"mtime":1645605844495,"results":"67","hashOfConfig":"42"},{"size":1927,"mtime":1645605844495,"results":"68","hashOfConfig":"42"},{"size":2309,"mtime":1645605844495,"results":"69","hashOfConfig":"42"},{"size":1915,"mtime":1645701886046,"results":"70","hashOfConfig":"42"},{"size":1847,"mtime":1646243544271,"results":"71","hashOfConfig":"42"},{"size":1027,"mtime":1645605844495,"results":"72","hashOfConfig":"42"},{"size":3562,"mtime":1646287293276,"results":"73","hashOfConfig":"42"},{"size":425,"mtime":1645605844495,"results":"74","hashOfConfig":"42"},{"size":1712,"mtime":1645605844499,"results":"75","hashOfConfig":"42"},{"size":770,"mtime":1645605844499,"results":"76","hashOfConfig":"42"},{"size":458,"mtime":1645605844499,"results":"77","hashOfConfig":"42"},{"size":7628,"mtime":1647245219629,"results":"78","hashOfConfig":"42"},{"size":1114,"mtime":1645605844495,"results":"79","hashOfConfig":"42"},{"size":1927,"mtime":1645605844495,"results":"80","hashOfConfig":"42"},{"size":951,"mtime":1647125724437,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"ar846m",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"111","usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"159","usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"166","usedDeprecatedRules":"84"},"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/index.js",[],[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/App.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/accessToken.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/index.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/ScrollToView.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/BecomePartner.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/muiTheme.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/store.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/index.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/index.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/Create.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/PageFour.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/reducers/index.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/PageTwo.js",["167"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography, Avatar, Alert } from \"@mui/material\";\nimport CustomButton from \"components/Utilities/CustomButton\";\nimport { ReactComponent as HealaIcon } from \"assets/images/logo.svg\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { createDoctorProfile } from \"components/graphQL/Mutation\";\nimport * as Yup from \"yup\";\nimport { useMutation } from \"@apollo/client\";\nimport { dateMoment } from \"components/Utilities/Time\";\n\nconst useStyles = makeStyles((theme) => ({\n  form: theme.mixins.toolbar,\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n      fontSize : \"1.5rem\"\n\n    },\n  },\n}));\nconst PageTwo = ({ handleNext, setStep }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  useEffect(() => {\n    setStep(2);\n  }, [setStep]);\n  const options = [\n    { key: \"Internal medicine\", value: \"Internal medicine\" },\n    { key: \"Family medicine\", value: \"Family medicine\" },\n    { key: \"Primary care\", value: \"Primary care\" },\n    { key: \"Pediatrics\", value: \"Pediatrics\" },\n    { key: \"Emergency medicine\", value: \"Emergency medicine\" },\n    { key: \"Obstetrics gynecology\", value: \"Obstetrics gynecology\" },\n    { key: \"Neurology\", value: \"Neurology\" },\n    { key: \"Geriatrics\", value: \"Geriatrics\" },\n    { key: \"Psychiatry\", value: \"Psychiatry\" },\n    { key: \"Anesthesiology\", value: \"Anesthesiology\" },\n    { key: \"Cardiology\", value: \"Cardiology\" },\n    { key: \"Dermatology\", value: \"Dermatology\" },\n    { key: \"Intensive medicine\", value: \"Intensive medicine\" },\n    { key: \"Endocrinology\", value: \"Endocrinology\" },\n    { key: \"Radiology\", value: \"Radiology\" },\n    { key: \"Otorhinolaryngology\", value: \"Otorhinolaryngology\" },\n    { key: \"Ophthalmology\", value: \"Ophthalmology\" },\n    { key: \"Oncology\", value: \"Oncology\" },\n    { key: \"General surgery\", value: \"General surgery\" },\n    { key: \"Gynaecology\", value: \"Gynaecology\" },\n    { key: \"Infectious disease\", value: \"Infectious disease\" },\n    { key: \"Rheumatology\", value: \"Rheumatology\" },\n    { key: \"Nephrology\", value: \"Nephrology\" },\n    { key: \"Infectious disease\", value: \"Infectious disease\" },\n    { key: \"Pulmonology\", value: \"Pulmonology\" },\n    { key: \"Gastroenterology\", value: \"Gastroenterology\" },\n    { key: \"Osteopathy\", value: \"Osteopathy\" },\n    { key: \"Clinical  physiology\", value: \"Clinical physiology\" },\n    { key: \"Allergology\", value: \"Allergology\" },\n    { key: \"Adolescent medicine \", value: \"Adolescent medicine \" },\n    { key: \"Aviation medicine\", value: \"Aviation medicine\" },\n    { key: \"Child and adolescent psychiatry\", value: \"Child and adolescent psychiatry\" },\n    { key: \"occupational medicine \", value: \"occupational medicine \" },\n    { key: \"Neonatology\", value: \"Neonatology\" },\n  ];\n  const gender = [\n    { key: \"Male\", value: \"Male\" },\n    { key: \"Female\", value: \"Female\" },\n  ];\n  const [alert, setAlert] = useState({});\n  const greenButton = {\n    background: theme.palette.success.main,\n    hover: theme.palette.success.light,\n    active: theme.palette.primary.dark,\n  };\n  const state = {\n    firstName: \"\",\n    lastName: \"\",\n    gender: \"\",\n    specialization: \"\",\n    dociId: localStorage.getItem(\"doctor_id\"),\n    dob: \"\",\n    image: null,\n    hospital: \"\",\n    phoneNumber: \"\",\n    level: \"\",\n  };\n  const validationSchema = Yup.object({\n    firstName: Yup.string(\"Enter your first Name\").required(\"First Name is Required\"),\n    lastName: Yup.string(\"Enter your last Name\").required(\"lastName Name is Required\"),\n    hospital: Yup.string(\"Enter your hospital\").required(\"hospital Name is Required\"),\n    dociId: Yup.string(\"Enter your dociId\").required(\"dociId Name is Required\"),\n    specialization: Yup.string(\"Select your Specialization\").required(\"Specialization is Required\"),\n    gender: Yup.string(\"Select your gender\").required(\"Gender is Required\"),\n    image: Yup.string(\"Upload a single Image\")\n      .required(\"Image is required\")\n      .typeError(\"Image is required\"),\n    dob: Yup.string(\"Enter your DOB\").required(\"DOB is Required\"),\n    phoneNumber: Yup.number(\"Enter your Phone Number\").required(\"Phone Number is Required\"),\n    level: Yup.string(\"Enter your Level\").required(\"Level is Required\"),\n  });\n  const selectOption = [\n    {\n      key: \"House Officer\",\n      value: \"House Officer\",\n    },\n    {\n      key: \"Registrar\",\n      value: \"Registrar\",\n    },\n    {\n      key: \"Senior Registrar\",\n      value: \"Senior Registrar\",\n    },\n    {\n      key: \"Consultant\",\n      value: \"Consultant\",\n    },\n  ];\n  const [createDoctor] = useMutation(createDoctorProfile);\n  const onSubmit = async (values) => {\n    const {\n      dob,\n      firstName,\n      lastName,\n      gender,\n      specialization,\n      image,\n      phoneNumber,\n      dociId,\n      hospital,\n      level,\n    } = values;\n    const correctDOB = dateMoment(dob);\n    try {\n      const { data } = await createDoctor({\n        variables: {\n          firstName,\n          lastName,\n          gender,\n          specialization,\n          image,\n          phoneNumber,\n          providerId: \"61db6f8968b248001aec4fcb\",\n          cadre: level,\n          dociId,\n          hospital,\n          dob: correctDOB,\n        },\n      });\n      const { _id } = data.createDoctorProfile.profile;\n      localStorage.setItem(\"id\", _id);\n      handleNext();\n      setAlert({\n        message: \"Doctor Registration Successful\",\n        type: \"success\",\n      });\n    } catch (err) {\n      setAlert({\n        message: err.networkError.result.errors[0].message,\n        type: \"error\",\n      });\n    }\n  };\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid container justifyContent=\"center\" alignItems=\"center\">\n        <Avatar sx={{ background: \"transparent\", color: \"white\", width: 150, height: 150 }}>\n          <HealaIcon />\n        </Avatar>\n      </Grid>\n      <Grid\n        item\n        container\n        direction=\"column\"\n        md={4}\n        sm={12}\n        gap={5}\n        sx={{\n          padding: \"2rem\",\n          background: \"white\",\n          borderRadius: \"5px\",\n          zIndex: \"999\",\n          margin: \"auto\",\n        }}\n      >\n        <Grid item>\n          <Formik\n            initialValues={state}\n            validationSchema={validationSchema}\n            validateOnChange={false}\n            validateOnBlur={false}\n            validateOnMount={false}\n            onSubmit={onSubmit}\n          >\n            {({ isSubmitting, setFieldValue, setValues, isValid, dirty }) => {\n              return (\n                <Form>\n                  <Grid container md={12} margin=\"auto\" gap={1}>\n                    <Grid item container justifyContent=\"space-around\" gap={2}>\n                      <Grid item container md={5} sm={10}>\n                        <Grid item>\n                          <Typography variant=\"h5\">CREATE PROFILE</Typography>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n\n                    <Grid item container justifyContent=\"space-around\" gap={1}>\n                      <FormikControl\n                        control=\"input\"\n                        name=\"firstName\"\n                        placeholder=\"Enter your First Name\"\n                        label=\"First Name\"\n                      />\n                    </Grid>\n                    <Grid item container justifyContent=\"space-around\" gap={1}>\n                      <FormikControl\n                        control=\"input\"\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        placeholder=\"Enter Your last Name\"\n                      />\n                    </Grid>\n                    <Grid item container justifyContent=\"space-around\" gap={2}>\n                      <FormikControl\n                        control=\"select\"\n                        name=\"specialization\"\n                        placeholder=\"Select Specialization\"\n                        label=\"Specialization\"\n                        options={options}\n                      />\n                    </Grid>\n                    <Grid item container justifyContent=\"space-around\" gap={2}>\n                      <FormikControl\n                        control=\"input\"\n                        name=\"phoneNumber\"\n                        label=\"Phone Number\"\n                        placeholder=\"e.g Enter Your phone Number\"\n                      />\n                    </Grid>\n                    <Grid item container justifyContent=\"space-around\" gap={2}>\n                      <FormikControl\n                        control=\"select\"\n                        name=\"level\"\n                        placeholder=\"Select Level\"\n                        label=\"Select Level\"\n                        options={selectOption}\n                      />\n                    </Grid>\n                    {/*  */}\n                    <Grid item container justifyContent=\"space-around\" gap={2}>\n                      <FormikControl\n                        control=\"date\"\n                        name=\"dob\"\n                        label=\"DOB\"\n                        setFieldValue={setFieldValue}\n                        setValues={setValues}\n                      />\n                    </Grid>\n                    <Grid item container justifyContent=\"space-around\" gap={2}>\n                      <FormikControl\n                        control=\"select\"\n                        name=\"gender\"\n                        label=\"Gender\"\n                        options={gender}\n                        placeholder=\"Select Gender\"\n                      />\n                    </Grid>\n                    {/*  */}\n\n                    <Grid item container justifyContent=\"space-around\" gap={2}>\n                      <FormikControl\n                        control=\"input\"\n                        name=\"hospital\"\n                        label=\"Hospital\"\n                        placeholder=\"Hospital\"\n                      />\n                    </Grid>\n                    <Grid item container justifyContent=\"space-around\">\n                      <FormikControl\n                        control=\"file\"\n                        name=\"image\"\n                        label=\"Upload Your Image\"\n                        setFieldValue={setFieldValue}\n                      />\n                    </Grid>\n\n                    <Grid item container>\n                      {alert && Object.keys(alert).length > 0 && (\n                        <Alert\n                          variant=\"filled\"\n                          sx={{ justifyContent: \"center\", alignItems: \"center\" }}\n                          severity={alert.type}\n                        >\n                          {alert.message}\n                        </Alert>\n                      )}\n                    </Grid>\n\n                    <Grid item container md={12} sm={10} margin=\"auto\">\n                      <CustomButton\n                        variant=\"contained\"\n                        title=\"Continue\"\n                        type={greenButton}\n                        className={classes.btn}\n                        isSubmitting={isSubmitting}\n                        disabled={!(dirty || isValid)}\n                      />\n                    </Grid>\n                  </Grid>\n                </Form>\n              );\n            }}\n          </Formik>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\nPageTwo.propTypes = {\n  handleNext: PropTypes.func.isRequired,\n  setStep: PropTypes.func,\n};\nexport default PageTwo;\n","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/Loader.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/Card.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/Button.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/FormInput.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/CheckBox.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/FormSelect.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/CustomButton.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/PreviousButton.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/Form.js",["168"],"import React, { useLayoutEffect, useEffect, useState } from \"react\";\nimport { Grid, FormLabel, Typography, Avatar, Alert } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport { Card, CustomButton } from \"components/Utilities\";\nimport { createDoctorVerification } from \"components/graphQL/Mutation\";\nimport * as Yup from \"yup\";\nimport { useMutation } from \"@apollo/client\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { ReactComponent as LicenseIcon } from \"assets/images/licenses.svg\";\nimport { ReactComponent as HealaIcon } from \"assets/images/logo.svg\";\nimport { ReactComponent as CalendarIcon } from \"assets/images/calendar.svg\";\nimport { ReactComponent as ReferenceIcon } from \"assets/images/reference.svg\";\nimport ErrorRoundedIcon from \"@mui/icons-material/ErrorRounded\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useQuery } from \"@apollo/client\";\nimport { getUsertypess } from \"components/graphQL/UseQuery\";\n// import { dashboard } from \"components/graphQL/useQuery\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardContainer: {\n    \"&.MuiCard-root\": {\n      width: \"100%\",\n      height: \"15.8rem\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      background: \"white\",\n      marginRight: \"5rem\",\n      \"&:hover\": {\n        boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\n        cursor: \"pointer\",\n      },\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n      \"& .MuiCardContent-root .MuiTypography-h5\": {\n        textDecoration: \"none !important\",\n        textTransform: \"uppercase\",\n      },\n    },\n  },\n  form: theme.mixins.toolbar,\n\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n  iconWrapper: {\n    width: 50,\n    height: 50,\n    borderRadius: \"50%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  cardGrid: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"25.8rem\",\n  },\n  flexContainer: {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    margin: \"auto\",\n    width: \"100%\",\n\n    padding: \"2rem 4rem\",\n    \"&:first-child\": {\n      borderBottom: \".5px solid #F8F8F8\",\n    },\n  },\n  lightGreen: {\n    color: theme.palette.common.green,\n  },\n\n  lightRed: {\n    color: theme.palette.common.red,\n  },\n  mainContainer: {\n    flexDirection: \"column\",\n    width: \"100%\",\n    background: \"white\",\n    borderRadius: \"2rem\",\n    boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\n  },\n  infoBadge: {\n    \"&.MuiGrid-item\": {\n      padding: \".2rem 2rem\",\n      borderRadius: \"1.5rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      color: theme.palette.common.red,\n      background: theme.palette.common.lightRed,\n      border: `2px dashed ${theme.palette.common.red}`,\n    },\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n      fontSize: \"1.5rem\",\n    },\n  },\n  parentGrid: {\n    textDecoration: \"none\",\n    color: theme.palette.primary.main,\n    \"&.MuiGrid-item\": {\n      ...theme.typography.cardParentGrid,\n    },\n  },\n  cardIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"3rem\",\n    },\n  },\n  active: {\n    \"&> *\": {\n      background: \"#ECF6F3 !important\",\n    },\n  },\n}));\n\nconst Forms = ({ handleNext }) => {\n  const [alert, setAlert] = useState({});\n  const classes = useStyles();\n  const theme = useTheme();\n  const [createVerification] = useMutation(createDoctorVerification);\n  const onSubmit = async (values) => {\n    const {\n      degree,\n      degreeImage,\n      license,\n      expire,\n      licenseImage,\n      licenseType,\n      gYear,\n      gImage,\n      FacebookName,\n      InstagramName,\n      doctorName,\n      referenceCode,\n      doctorEmail,\n      doctorPosition,\n      doctorInstitution,\n    } = values;\n\n    const year = dateMoment(gYear);\n    const expires = dateMoment(expire);\n\n    try {\n      await createVerification({\n        variables: {\n          degree, //\n          image: degreeImage,\n          number: license,\n          expiryDate: expires,\n          licenseImage, //\n          type: licenseType,\n          graduation: year, //\n          graduationImage: gImage,\n          facebook: FacebookName,\n          instagram: InstagramName,\n          doctorName: doctorName,\n          reference: referenceCode,\n          profileId: localStorage.getItem(\"id\"),\n          doctorEmail,\n          doctorPosition, //\n          doctorInstitution, //\n        },\n      });\n      handleNext();\n    } catch (err) {\n      console.log(err);\n\n      setAlert({\n        message: err.networkError.result.errors[0].message,\n        type: \"error\",\n      });\n    }\n  };\n\n  const options = [{ key: \"MDCN\", value: \"MDCN\" }];\n  const initialValues = {\n    degree: \"\",\n    degreeImage: \"\",\n    license: \"\",\n    expires: \"\",\n    licenseImage: \"\",\n    licenseType: \"\",\n    gYear: \"\",\n    gImage: \"\",\n    FacebookName: \"\",\n    InstagramName: \"\",\n    doctorName: \"\",\n    referenceCode: \"\",\n    doctorEmail: \"\",\n    doctorPosition: \"\",\n    doctorInstitution: \"\",\n  };\n\n  const validationSchema = Yup.object({\n    degreeImage: Yup.string(\"Enter Degree Image \"),\n    license: Yup.string(\"Enter license date \"),\n    expire: Yup.string(\"Enter expiry date \"),\n    licenseImage: Yup.string(\"Enter your license Image \"),\n    gYear: Yup.string(\"Enter your Year Book \"),\n    licenseType: Yup.string(\"Enter your license Type \"),\n    gImage: Yup.string(\"Enter your Year Book Image\"),\n    InstagramName: Yup.string(\"Enter your Instagram Name\"),\n    FacebookName: Yup.string(\"Enter your Facebook Name\"),\n    degree: Yup.string(\"Enter your degree\"),\n    doctorInstitution: Yup.string(\"Enter your Doctor Institution\"),\n    doctorPosition: Yup.string(\"Enter your Doctor Position\"),\n    doctorEmail: Yup.string(\"Enter your Doctor Email\"),\n    referenceCode: Yup.string(\"Enter your Reference Code\"),\n    doctorName: Yup.string(\"Select your Doctor Name\"),\n  });\n  const greenButton = {\n    background: theme.palette.success.main,\n    hover: theme.palette.success.light,\n    active: theme.palette.primary.dark,\n  };\n  const [qualification, setQualification] = useState(true);\n  const [license, setLicense] = useState(false);\n  const [yearBook, setYearBook] = useState(false);\n  const [alumni, setAlumni] = useState(false);\n  const [reference, setReference] = useState(false);\n  const [externalReference, setExternalReference] = useState(false);\n  const [dropDown, setDropDown] = useState([]);\n\n  const { data: da } = useQuery(getUsertypess, {\n    variables: {\n      userTypeId: \"61ed2354e6091400135e3d94\",\n    },\n  });\n\n  useEffect(() => {\n    if (da) {\n      const datas = da.getUserTypeProviders.provider;\n      setDropDown(\n        datas &&\n          datas.map((i) => {\n            return { key: i.name, value: i._id };\n          }),\n      );\n    }\n  }, [da]);\n\n  return (\n    <Grid container gap={1}>\n      <Grid container justifyContent=\"center\" alignItems=\"center\">\n        <Avatar\n          sx={{\n            background: \"transparent\",\n            color: \"white\",\n            width: 150,\n            height: 150,\n          }}\n        >\n          <HealaIcon />\n        </Avatar>\n      </Grid>\n\n      <Grid\n        item\n        container\n        md={11}\n        sm={12}\n        direction=\"column\"\n        gap={5}\n        sx={{\n          padding: \"3rem\",\n          background: \"white\",\n          borderRadius: \"5px\",\n          zIndex: \"999\",\n          margin: \"auto\",\n        }}\n      >\n        <Grid item>\n          <Typography textAlign=\"center\" variant=\"h1\">\n            Doctor Verification\n          </Typography>\n          <Typography variant=\"body1\" textAlign=\"center\" style={{ lineHeight: 1.85 }}>\n            Select at least 2 verification method\n          </Typography>\n          <Typography variant=\"h6\" textAlign=\"center\" color=\"green\">\n            (Qualification and any other)\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          container\n          justifyContent=\"space-between\"\n          rowGap={3}\n          spacing={3}\n          sx={{ width: \"100%\", margin: \"auto\" }}\n        >\n          <Grid\n            item\n            container\n            md={3.5}\n            xs={5.5}\n            className={\n              qualification ? `${classes.parentGrid} ${classes.active}` : classes.parentGrid\n            }\n            onClick={() => {\n              setQualification(!qualification);\n            }}\n          >\n            <Card title=\"Qualification\" background={theme.palette.common.lightRed}>\n              <Grid className={classes.iconWrapper}>\n                <CalendarIcon\n                  color=\"error\"\n                  fill={theme.palette.common.red}\n                  className={classes.cardIcon}\n                />\n              </Grid>\n            </Card>\n          </Grid>\n          <Grid\n            item\n            md={3.5}\n            xs={5.5}\n            className={license ? `${classes.parentGrid} ${classes.active}` : classes.parentGrid}\n            onClick={() => setLicense(!license)}\n          >\n            <Card title=\"License\" background={theme.palette.common.lightRed}>\n              <LicenseIcon\n                // color=\"error\"\n                fill={theme.palette.common.red}\n              />\n            </Card>\n          </Grid>\n          <Grid\n            item\n            md={3.5}\n            xs={5.5}\n            className={yearBook ? `${classes.parentGrid} ${classes.active}` : classes.parentGrid}\n            onClick={() => {\n              setYearBook(!yearBook);\n            }}\n          >\n            <Card title=\"Year Book\" background={theme.palette.common.lightRed}>\n              <CalendarIcon\n                color=\"error\"\n                fill={theme.palette.common.red}\n                className={classes.cardIcon}\n              />\n            </Card>\n          </Grid>\n\n          {/* second container */}\n          <Grid\n            md={3.5}\n            xs={5.5}\n            item\n            className={alumni ? `${classes.parentGrid} ${classes.active}` : classes.parentGrid}\n            onClick={() => {\n              setAlumni(!alumni);\n            }}\n          >\n            <Card title=\"Alumni Association\" background={theme.palette.common.lightRed}>\n              {/* <Grid item className={classes.iconWrapper}> */}\n              <CalendarIcon\n                color=\"error\"\n                fill={theme.palette.common.red}\n                className={classes.cardIcon}\n              />\n              {/* </Grid> */}\n            </Card>\n          </Grid>\n          {/* 2b */}\n          <Grid\n            item\n            md={3.5}\n            xs={5.5}\n            className={reference ? `${classes.parentGrid} ${classes.active}` : classes.parentGrid}\n            onClick={() => {\n              setReference(!reference);\n            }}\n          >\n            <Card title=\"Heala Reference\" background={theme.palette.common.lightRed}>\n              <CalendarIcon\n                color=\"error\"\n                fill={theme.palette.common.red}\n                className={classes.cardIcon}\n              />\n            </Card>\n          </Grid>\n          {/* 3b */}\n          <Grid\n            item\n            md={3.5}\n            xs={5.5}\n            className={\n              externalReference ? `${classes.parentGrid} ${classes.active}` : classes.parentGrid\n            }\n            onClick={() => {\n              setExternalReference(!externalReference);\n            }}\n          >\n            <Card title=\"External Reference\" background={theme.palette.common.lightRed}>\n              <ReferenceIcon color=\"error\" className={classes.cardIcon} />\n            </Card>\n          </Grid>\n        </Grid>\n\n        <Grid item className={classes.infoBadge} gap={2}>\n          <ErrorRoundedIcon />\n          <Typography variant=\"h6\">\n            This will contain the status message regarding the verification process of the HCP\n          </Typography>\n        </Grid>\n\n        <Grid item>\n          {alert && Object.keys(alert).length > 0 && (\n            <Alert\n              variant=\"filled\"\n              sx={{ justifyContent: \"center\", alignItems: \"center\" }}\n              severity={alert.type}\n            >\n              {alert.message}\n            </Alert>\n          )}\n          <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            validationSchema={validationSchema}\n            validateOnChange={false}\n            validateOnMount={false}\n            validateOnBlur={false}\n          >\n            {({ setValues, setFieldValue, isSubmitting, dirty, isValid, errors }) => {\n              console.log(errors);\n\n              return (\n                <Form>\n                  {qualification ? (\n                    <>\n                      <Grid\n                        item\n                        container\n                        md={12}\n                        sm={12}\n                        direction=\"column\"\n                        justifyContent=\"space-between\"\n                        gap={1}\n                        marginBottom={4}\n                      >\n                        <Typography variant=\"h2\">Qualification</Typography>\n\n                        <Grid item container justifyContent=\"space-between\" gap={1}>\n                          <Grid item container md={5} sm={10}>\n                            <FormikControl\n                              control=\"input\"\n                              name=\"degree\"\n                              placeholder=\"BSc Surgery\"\n                              label=\"Degree\"\n                            />\n                          </Grid>\n                          <Grid item container md={5} sm={10}>\n                            <FormikControl\n                              control=\"date\"\n                              name=\"year\"\n                              label=\"Year\"\n                              setFieldValue={setFieldValue}\n                              setValues={setValues}\n                            />\n                          </Grid>\n                        </Grid>\n                        <FormLabel component=\"legend\" className={classes.FormLabel}>\n                          Upload Your Qualification\n                        </FormLabel>\n                        <Grid\n                          container\n                          sx={{\n                            height: \"200 px\",\n                            border: \"2px dashed #CCCCCC\",\n                          }}\n                        >\n                          <Grid item container>\n                            <Grid\n                              container\n                              item\n                              direction=\"column\"\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                            >\n                              <label\n                                htmlFor=\"contained-button-file\"\n                                style={{ textAlign: \"center\" }}\n                              >\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                  }}\n                                >\n                                  <FormikControl\n                                    control=\"file\"\n                                    name=\"degreeImage\"\n                                    setFieldValue={setFieldValue}\n                                  />\n                                </div>\n\n                                <Grid marginTop=\"1.5rem\">\n                                  {\" \"}\n                                  <Typography textAlign=\"center\" variant=\"h6\">\n                                    Drag and Drop and Image or\n                                  </Typography>\n                                  <Typography textAlign=\"left\" variant=\"h6\" color=\"error\">\n                                    Browse\n                                  </Typography>\n                                </Grid>\n                              </label>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </>\n                  ) : null}\n\n                  {/*  */}\n                  {license ? (\n                    <>\n                      <Grid\n                        item\n                        container\n                        md={12}\n                        sm={12}\n                        direction=\"column\"\n                        justifyContent=\"space-between\"\n                        gap={3}\n                        marginBottom={4}\n                      >\n                        <Typography variant=\"h2\">License</Typography>\n                        <Grid item container justifyContent=\"space-between\" spacing={3}>\n                          <Grid item container md={12} sm={10}>\n                            <FormikControl\n                              control=\"input\"\n                              name=\"license\"\n                              placeholder=\"Enter license number\"\n                              label=\"License Number\"\n                            />\n                          </Grid>\n                          <Grid item container justifyContent=\"space-between\" gap={2}>\n                            <Grid item container md={5} sm={10}>\n                              <FormikControl\n                                control=\"select\"\n                                name=\"licenseType\"\n                                placeholder=\"Select License Type\"\n                                label=\"Type\"\n                                options={options}\n                              />\n                            </Grid>\n                            <Grid item container md={5} sm={10}>\n                              <FormikControl\n                                control=\"date\"\n                                name=\"expire\"\n                                label=\"Expiry Date\"\n                                setFieldValue={setFieldValue}\n                                setValues={setValues}\n                              />\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                        <FormLabel component=\"legend\" className={classes.FormLabel}>\n                          Upload Your License\n                        </FormLabel>\n                        <Grid\n                          item\n                          container\n                          sx={{\n                            height: \"200 px\",\n                            border: \"2px dashed #CCCCCC\",\n                          }}\n                        >\n                          <Grid item container alignItems=\"center\">\n                            <Grid\n                              container\n                              direction=\"column\"\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                            >\n                              <label\n                                htmlFor=\"contained-button-file\"\n                                style={{ textAlign: \"center\" }}\n                              >\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                  }}\n                                >\n                                  <FormikControl\n                                    control=\"file\"\n                                    name=\"licenseImage\"\n                                    setFieldValue={setFieldValue}\n                                  />\n                                </div>\n\n                                <Grid marginTop=\"1.5rem\">\n                                  <Typography textAlign=\"center\" variant=\"h6\">\n                                    Drag and Drop and Image or\n                                  </Typography>\n                                  <Typography textAlign=\"left\" variant=\"h6\" color=\"error\">\n                                    Browse\n                                  </Typography>\n                                </Grid>\n                              </label>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </>\n                  ) : null}\n\n                  {/* yearbook */}\n                  {yearBook ? (\n                    <>\n                      <Grid\n                        item\n                        container\n                        md={12}\n                        xs={12}\n                        direction=\"column\"\n                        justifyContent=\"space-between\"\n                        gap={3}\n                        marginBottom={4}\n                      >\n                        <Typography variant=\"h2\">Year Book</Typography>\n                        <Grid item container justifyContent=\"space-between\" spacing={3}>\n                          <Grid item container justifyContent=\"start\">\n                            <FormikControl\n                              control=\"date\"\n                              name=\"gYear\"\n                              label=\"Graduation year\"\n                              setFieldValue={setFieldValue}\n                              setValues={setValues}\n                            />\n                          </Grid>\n                        </Grid>\n                        <FormLabel component=\"legend\" className={classes.FormLabel}>\n                          Upload Your Yearbook\n                        </FormLabel>\n                        <Grid\n                          item\n                          container\n                          justifyContent=\"center\"\n                          sx={{\n                            height: \"200 px\",\n                            border: \"2px dashed #CCCCCC\",\n                          }}\n                        >\n                          <Grid item container alignItems=\"center\" justifyContent=\"center\">\n                            <Grid\n                              container\n                              direction=\"column\"\n                              alignItems=\"center\"\n                              justifyContent=\"center\"\n                            >\n                              <label\n                                htmlFor=\"contained-button-file\"\n                                style={{ textAlign: \"center\" }}\n                              >\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                  }}\n                                >\n                                  <FormikControl\n                                    control=\"file\"\n                                    name=\"gImage\"\n                                    setFieldValue={setFieldValue}\n                                  />\n                                </div>\n\n                                <Grid marginTop=\"1.5rem\">\n                                  <Typography textAlign=\"left\" variant=\"h6\">\n                                    Drag and Drop and Image or\n                                  </Typography>\n                                  <Typography textAlign=\"left\" variant=\"h6\" color=\"error\">\n                                    Browse\n                                  </Typography>\n                                </Grid>\n                              </label>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </>\n                  ) : null}\n\n                  {/* Alumni Association */}\n                  {alumni ? (\n                    <>\n                      <Grid\n                        item\n                        container\n                        md={12}\n                        sm={12}\n                        direction=\"column\"\n                        justifyContent=\"space-between\"\n                        gap={3}\n                        marginBottom={4}\n                      >\n                        <Typography variant=\"h2\">Alumni Association</Typography>\n                        <Grid item container justifyContent=\"space-between\" gap={3}>\n                          <Grid item container sm={10} md={12}>\n                            <FormikControl\n                              control=\"input\"\n                              name=\"FacebookName\"\n                              placeholder=\"Enter facebook group name\"\n                              label=\"Facebook Group Name\"\n                            />\n                          </Grid>\n                          <Grid item container sm={10} md={12}>\n                            <FormikControl\n                              control=\"input\"\n                              name=\"InstagramName\"\n                              placeholder=\"Enter group instagram handle\"\n                              label=\"Instagram Handle\"\n                            />\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </>\n                  ) : null}\n                  {/* refrence */}\n                  {reference ? (\n                    <>\n                      <Grid\n                        item\n                        container\n                        md={12}\n                        sm={12}\n                        direction=\"column\"\n                        justifyContent=\"space-between\"\n                        gap={3}\n                        marginBottom={4}\n                      >\n                        <Typography variant=\"h2\">Reference From Doctor on Heala</Typography>\n                        <Grid item container justifyContent=\"space-between\" spacing={3}>\n                          <Grid item container md={12} sm={10}>\n                            <FormikControl\n                              control=\"select\"\n                              name=\"referenceCode\"\n                              placeholder=\"Select reference \"\n                              label=\"Reference\"\n                              options={dropDown}\n                            />\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </>\n                  ) : null}\n\n                  {/* external reference */}\n                  {externalReference ? (\n                    <>\n                      <Grid\n                        item\n                        container\n                        md={12}\n                        sm={12}\n                        direction=\"column\"\n                        justifyContent=\"space-between\"\n                        gap={2}\n                        marginBottom={4}\n                      >\n                        <Typography variant=\"h2\">External Reference</Typography>\n                        <Grid item md={12}>\n                          <Grid item container marginBottom={2} justifyContent=\"space-between\">\n                            <Grid item md={5} sm={10}>\n                              <FormikControl\n                                control=\"input\"\n                                name=\"doctorName\"\n                                placeholder=\"Enter Doctor's name\"\n                                label=\"Doctor's name\"\n                              />\n                            </Grid>\n                            <Grid item md={5} sm={10}>\n                              <FormikControl\n                                control=\"input\"\n                                name=\"doctorInstitution\"\n                                label=\"Doctor's institution\"\n                                placeholder=\"e.g Federal Teaching hospital Akure\"\n                              />\n                            </Grid>\n                          </Grid>\n                          <Grid item container justifyContent=\"space-between\">\n                            <Grid item container md={5} sm={10}>\n                              <FormikControl\n                                control=\"input\"\n                                name=\"doctorPosition\"\n                                label=\"Doctor's Position\"\n                                placeholder=\"e.g Dentist\"\n                              />\n                            </Grid>\n                            <Grid item container md={5} sm={10}>\n                              <FormikControl\n                                control=\"input\"\n                                name=\"doctorEmail\"\n                                disabled\n                                label=\" Doctor's Email\"\n                                placeholder=\"Enter email\"\n                              />\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                      {/* <Grid\n                        item\n                        container\n                        md={12}\n                        sm={12}\n                        direction=\"column\"\n                        justifyContent=\"space-between\"\n                        gap={3}\n                        marginBottom={4}\n                      >\n                        <Typography variant=\"h2\">Reference From Doctor on Heala</Typography>\n                        <Grid item container justifyContent=\"space-between\" spacing={3}>\n                          <Grid item container md={12} sm={10}>\n                            <FormikControl\n                              control=\"input\"\n                              name=\"referenceCode\"\n                              placeholder=\"Enter reference code\"\n                              label=\"Reference Code\"\n                            />\n                          </Grid>\n                        </Grid>\n                      </Grid> */}\n                    </>\n                  ) : null}\n                  {alert && Object.keys(alert).length > 0 && (\n                    <Alert variant=\"filled\" sx={{ textAlign: \"center\" }} severity={alert.type}>\n                      {alert.message}\n                    </Alert>\n                  )}\n\n                  <Grid item md={12} container sm={10}>\n                    <CustomButton\n                      variant=\"contained\"\n                      title=\" Save Record\"\n                      type={greenButton}\n                      className={classes.btn}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Form>\n              );\n            }}\n          </Formik>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Forms;\nForms.propTypes = {\n  handleNext: PropTypes.func.isRequired,\n};\n","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/Time.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/graphQL/Mutation.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/FormikControl.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/DateTimePicker.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/Textarea.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/Select.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/Date.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/Input.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/File.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/TextError.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/reducers/authReducer.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/reducers/tablesReducer.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/store/action-types/index.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/pages/PageOne.js",["169","170","171"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, InputAdornment, Alert, Typography, Avatar } from \"@mui/material\";\nimport { ReactComponent as HealaIcon } from \"assets/images/logo.svg\";\nimport { CustomButton } from \"components/Utilities\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Formik, Form } from \"formik\";\nimport LoginInput from \"components/validation/LoginInput\";\nimport * as Yup from \"yup\";\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport { signup } from \"components/graphQL/Mutation\";\nimport { useMutation } from \"@apollo/client\";\nimport { setAccessToken } from \"accessToken\";\n\nconst useStyles = makeStyles((theme) => ({\n  form: theme.mixins.toolbar,\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n      fontSize : \"1.5rem\"\n    },\n  },\n  header: {\n    \"&.MuiGrid-root\": {\n      fontSize: \"2rem\",\n      lineHeight: \"2.6rem\",\n      color: \"#010101\",\n      fontWeight:\"600\",\n    },\n  },\n}));\n\nconst PageOne = ({ handleNext }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showPasswords, setShowPasswords] = useState(false);\n  const greenButton = {\n    background: theme.palette.success.main,\n    hover: theme.palette.success.light,\n    active: theme.palette.primary.dark,\n  };\n  const validationSchema = Yup.object({\n    email: Yup.string().email(\"Enter a valid email\").required(\"Email Required\"),\n    password: Yup.string(\"Select your password\").required(\"Password Required\").min(8),\n    confirmPassword: Yup.string()\n      .when(\"password\", {\n        is: (val) => (val && val.length > 0 ? true : false),\n        then: Yup.string().oneOf([Yup.ref(\"password\")], \"password mismatch\"),\n      })\n      .required(\"Please confirm Password\"),\n  });\n  const [alert, setAlert] = useState({});\n  const state = {\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n  const [register] = useMutation(signup);\n\n  const onSubmit = async (values, onsubmitProp) => {\n    const { email, password } = values;\n    try {\n      const { data } = await register({\n        variables: {\n          email,\n          password,\n        },\n      });\n\n      const { dociId, email: emails, access_token } = data.signup.account;\n      localStorage.setItem(\"doctor_id\", dociId);\n      localStorage.setItem(\"token\", access_token);\n      localStorage.setItem(\"email\", emails);\n      setAccessToken(access_token);\n\n      setAlert({\n        message: \"Registration Successfull\",\n        type: \"success\",\n      });\n      handleNext();\n    } catch (err) {\n      setAlert({\n        message: err.networkError.result.errors[0].message,\n        type: \"error\",\n      });\n    }\n\n    onsubmitProp.resetForm();\n  };\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid\n        item\n        container\n        style={{ marginTop: \"-20%\", justifyContent: \"center\", alignItems: \"center\" }}\n      >\n        <Avatar sx={{ background: \"transparent\", color: \"white\", width: 150, height: 150 }}>\n          <HealaIcon />\n        </Avatar>\n      </Grid>\n      <Grid\n        item\n        container\n        md={5}\n        xs={11}\n        direction=\"column\"\n        sx={{\n          padding: \"4rem 3rem 3rem\",\n          background: \"white\",\n          borderRadius: \"5px\",\n          width: \"750px\",\n          zIndex: \"9999999\",\n          margin: \"auto\",\n        }}\n      >\n        {alert && Object.keys(alert).length > 0 && (\n          <Alert\n            sx={{ justifyContent: \"center\", alignItems: \"center\" }}\n            variant=\"filled\"\n            severity={alert.type}\n          >\n            {alert.message}\n          </Alert>\n        )}\n        <Grid item>\n          <Formik\n            initialValues={state}\n            validateOnChange={false}\n            validateOnBlur={false}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            validateOnMount={false}\n          >\n            {({ isSubmitting, isValid, dirty, values }) => {\n              return (\n                <Form>\n                  <Grid container item gap={4}>\n                    <Grid item container justifyContent=\"center\" rowSpacing={1}>\n                      <Grid item container justifyContent=\"center\" md={12} sm={10} marginBottom=\"14px\">\n                        <Typography variant=\"h5\" className={classes.header}>\n                          CREATE YOUR ACCOUNT\n                        </Typography>\n                      </Grid>\n                      <Grid item container md={12} sm={10}>\n                        <LoginInput\n                          label=\"Email\"\n                          name=\"email\"\n                          type=\"email\"\n                          id=\"email\"\n                          placeholder=\"Enter your email\"\n                          hasStartIcon={false}\n                        />\n                      </Grid>\n                      <Grid item container md={12} sm={10}>\n                        <LoginInput\n                          id=\"password\"\n                          label=\"Password\"\n                          name=\"password\"\n                          placeholder=\"Enter your password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          hasStartIcon={false}\n                          endAdornment={\n                            <InputAdornment\n                              position=\"end\"\n                              onClick={() => setShowPassword((prev) => !prev)}\n                              style={{ cursor: \"pointer\" }}\n                            >\n                              {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                            </InputAdornment>\n                          }\n                        />\n                      </Grid>\n\n                      <Grid item container md={12} sm={10}>\n                        <LoginInput\n                          id=\"confirmPassword\"\n                          label=\"Confirm Password\"\n                          name=\"confirmPassword\"\n                          placeholder=\"Enter your password again\"\n                          type={showPasswords ? \"text\" : \"password\"}\n                          hasStartIcon={false}\n                          endAdornment={\n                            <InputAdornment\n                              position=\"end\"\n                              onClick={() => setShowPasswords((prev) => !prev)}\n                              style={{ cursor: \"pointer\" }}\n                            >\n                              {showPasswords ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                            </InputAdornment>\n                          }\n                        />\n                      </Grid>\n                    </Grid>\n\n                    <Grid item container margin=\"auto\" md={12} sm={10}>\n                      <CustomButton\n                        variant=\"contained\"\n                        title=\"Create My Account\"\n                        type={greenButton}\n                        className={classes.btn}\n                        isSubmitting={isSubmitting}\n                        disabled={!(dirty || isValid)}\n                      />\n                    </Grid>\n                  </Grid>\n                </Form>\n              );\n            }}\n          </Formik>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\nexport default PageOne;\n\nPageOne.propTypes = {\n  handleNext: PropTypes.func.isRequired,\n};\n","/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/validation/LoginInput.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/Utilities/SearchInput.js",[],"/home/codabae/Documents/Projects/workProjects/healaWeb/webD/src/components/graphQL/UseQuery.js",["172","173"],"import { gql, useQuery } from \"@apollo/client\";\n\nexport const getUsertypess = gql`\n  query getUserTypeProviders($userTypeId: String) {\n    getUserTypeProviders(filterBy: { userTypeId: $userTypeId }) {\n      provider {\n        _id\n        name\n        icon\n        userTypeId\n        createdAt\n        updatedAt\n        userTypeData {\n          name\n          icon\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`;\n\nexport const dashboard = gql`\n  query getStats($providerId: String, $q: String) {\n    getStats(filterBy: { providerId: $providerId }, q: $q) {\n      patientStats\n      doctorStats\n      totalEarnings\n      totalPayout\n      appointmentStats\n      subscribers\n      availabilityCalendar {\n        _id\n        doctor\n        doctorData\n        dates {\n          day\n          available\n          times {\n            start\n            stop\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;",{"ruleId":"174","severity":1,"message":"175","line":21,"column":15,"nodeType":null,"messageId":"176","endLine":22,"endColumn":1,"fix":"177"},{"ruleId":"178","severity":1,"message":"179","line":1,"column":17,"nodeType":"180","messageId":"181","endLine":1,"endColumn":32},{"ruleId":"174","severity":1,"message":"182","line":23,"column":15,"nodeType":null,"messageId":"176","endLine":23,"endColumn":26,"fix":"183"},{"ruleId":"174","severity":1,"message":"184","line":31,"column":18,"nodeType":null,"messageId":"185","endLine":31,"endColumn":18,"fix":"186"},{"ruleId":"174","severity":1,"message":"187","line":144,"column":28,"nodeType":null,"messageId":"176","endLine":144,"endColumn":103,"fix":"188"},{"ruleId":"178","severity":1,"message":"189","line":1,"column":15,"nodeType":"180","messageId":"181","endLine":1,"endColumn":23},{"ruleId":"174","severity":1,"message":"190","line":50,"column":3,"nodeType":null,"messageId":"185","endLine":50,"endColumn":3,"fix":"191"},"prettier/prettier","Replace `·:·\"1.5rem\"⏎` with `:·\"1.5rem\",`","replace",{"range":"192","text":"193"},"no-unused-vars","'useLayoutEffect' is defined but never used.","Identifier","unusedVar","Replace `·:·\"1.5rem\"` with `:·\"1.5rem\",`",{"range":"194","text":"193"},"Insert `·`","insert",{"range":"195","text":"196"},"Replace `·item·container·justifyContent=\"center\"·md={12}·sm={10}·marginBottom=\"14px\"` with `⏎························item⏎························container⏎························justifyContent=\"center\"⏎························md={12}⏎························sm={10}⏎························marginBottom=\"14px\"⏎······················`",{"range":"197","text":"198"},"'useQuery' is defined but never used.","Insert `⏎`",{"range":"199","text":"200"},[852,864],": \"1.5rem\",",[947,958],[1100,1100]," ",[4359,4434],"\n                        item\n                        container\n                        justifyContent=\"center\"\n                        md={12}\n                        sm={10}\n                        marginBottom=\"14px\"\n                      ",[951,951],"\n"]